import numpy as np 
from tensorflow.keras.models import Sequential 
from tensorflow.keras.layers import Dense 
from tensorflow.keras.utils import to_categorical 
from sklearn.model_selection import KFold 
from sklearn.preprocessing import StandardScaler 
from sklearn.datasets import load_iris 
from sklearn.metrics import accuracy_score 

# Load the Iris dataset 
data = load_iris() 
X = data.data  # Features 
y = data.target  # Target (3 classes: 0, 1, 2)

# Standardize the features 
scaler = StandardScaler() 
X = scaler.fit_transform(X)

# One-hot encode the target labels for multiclass classification 
y = to_categorical(y, num_classes=3)

# Define a function to build the neural network model 
def build_model(): 
    model = Sequential([ 
        Dense(64, input_shape=(X.shape[1],), activation='relu'),  # Input + first hidden layer 
        Dense(32, activation='relu'),  # Second hidden layer 
        Dense(3, activation='softmax')  # Output layer with softmax for multiclass classification 
    ]) 
    model.compile(optimizer='adam', 
                  loss='categorical_crossentropy',  # Loss function for multiclass classification 
                  metrics=['accuracy'])  # Accuracy metric 
    return model

# Perform K-Fold Cross-Validation 
k = 5  # 5-fold cross-validation 
kf = KFold(n_splits=k, shuffle=True, random_state=42)

accuracy_scores = []

for fold_no, (train_index, val_index) in enumerate(kf.split(X), start=1): 
    print(f"Training fold {fold_no}...")

    # Split the data into training and validation sets 
    X_train, X_val = X[train_index], X[val_index] 
    y_train, y_val = y[train_index], y[val_index] 

    # Build the model 
    model = build_model()

    # Train the model 
    model.fit(X_train, y_train, epochs=50, batch_size=16, verbose=0, validation_data=(X_val, y_val))

    # Evaluate the model on the validation set 
    y_pred = model.predict(X_val) 
    y_pred_classes = np.argmax(y_pred, axis=1)  # Convert one-hot predictions to class labels 
    y_true_classes = np.argmax(y_val, axis=1)  # Convert one-hot true labels to class labels 
    accuracy = accuracy_score(y_true_classes, y_pred_classes) 
    accuracy_scores.append(accuracy)

    print(f"Fold {fold_no} - Accuracy: {accuracy:.4f}")

# Calculate mean and standard deviation of accuracy 
print("\nCross-Validation Results:") 
print(f"Mean Accuracy: {np.mean(accuracy_scores):.4f} Â± {np.std(accuracy_scores):.4f}")
