import numpy as np 
from tensorflow.keras.models import Sequential 
from tensorflow.keras.layers import Dense 
from sklearn.model_selection import KFold 
from sklearn.preprocessing import StandardScaler 
from sklearn.datasets import load_diabetes 

# Load the Diabetes dataset 
data = load_diabetes() 
X = data.data # Features 
y = data.target # Target values (continuous, disease progression) 

# Standardize the features 
scaler = StandardScaler() 
X = scaler.fit_transform(X) 

# Define the number of folds 
k = 5 # 5-fold cross-validation 
kf = KFold(n_splits=k, shuffle=True, random_state=42) 

# Define a function to build the model 
def build_model(): 
    model = Sequential([ 
        Dense(64, input_shape=(X.shape[1],), activation='relu'),  # Input + first hidden layer 
        Dense(32, activation='relu'),  # Second hidden layer 
        Dense(1, activation='linear')  # Output layer for regression 
    ]) 
    model.compile(optimizer='adam', 
                  loss='mean_squared_error',  # Loss function for regression 
                  metrics=['mean_absolute_error'])  # Evaluation metric 
    return model 

# Perform K-Fold Cross-Validation 
fold_no = 1 
mse_scores = [] 
mae_scores = [] 

for train_index, val_index in kf.split(X): 
    print(f"Training fold {fold_no}...") 

    # Split the data into training and validation sets 
    X_train, X_val = X[train_index], X[val_index] 
    y_train, y_val = y[train_index], y[val_index] 

    # Build the model 
    model = build_model() 

    # Train the model 
    history = model.fit(X_train, y_train, epochs=50, batch_size=16, verbose=0, 
                        validation_data=(X_val, y_val)) 

    # Evaluate the model on the validation set 
    mse, mae = model.evaluate(X_val, y_val, verbose=0) 
    mse_scores.append(mse) 
    mae_scores.append(mae) 
    print(f"Fold {fold_no} - MSE: {mse:.4f}, MAE: {mae:.4f}") 
    fold_no += 1 

# Calculate mean and standard deviation of metrics 
print("\nCross-Validation Results:") 
print(f"Mean MSE: {np.mean(mse_scores):.4f} ± {np.std(mse_scores):.4f}") 
print(f"Mean MAE: {np.mean(mae_scores):.4f} ± {np.std(mae_scores):.4f}")
