import numpy as np 
import tensorflow as tf 
from tensorflow.keras.models import Sequential 
from tensorflow.keras.layers import Dense 
from sklearn.datasets import make_classification 
from sklearn.model_selection import train_test_split 
from sklearn.metrics import accuracy_score 

# Generate a perfectly separable dataset 
X, y = make_classification(n_samples=100, n_features=20, n_informative=20, 
                            n_redundant=0, n_clusters_per_class=1, 
                            n_classes=2, random_state=42) 

# Split the dataset into training and testing sets (80% train, 20% test) 
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42) 

# Build the deep neural network model 
model = Sequential() 
model.add(Dense(128, input_dim=X_train.shape[1], activation='relu'))  # First hidden layer 
model.add(Dense(64, activation='relu'))  # Second hidden layer 
model.add(Dense(32, activation='relu'))  # Third hidden layer 
model.add(Dense(1, activation='sigmoid'))  # Output layer (binary classification) 

# Compile the model 
model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy']) 

# Train the model 
model.fit(X_train, y_train, epochs=50, batch_size=8, verbose=1) 

# Evaluate the model on the test data 
loss, accuracy = model.evaluate(X_test, y_test) 
print(f"Test Loss: {loss:.4f}, Test Accuracy: {accuracy*100:.2f}%") 

# Make predictions on the test set 
predictions = model.predict(X_test) 
predictions_binary = (predictions > 0.5).astype("int32") 

# Print a few predictions 
print("First 10 predictions:") 
print(predictions_binary[:10]) 

# Check if accuracy is 100% 
test_accuracy = accuracy_score(y_test, predictions_binary) 
print(f"Test Accuracy (calculated manually): {test_accuracy*100:.2f}%")
