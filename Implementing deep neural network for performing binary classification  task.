import numpy as np 
import tensorflow as tf 
from tensorflow.keras.models import Sequential 
from tensorflow.keras.layers import Dense 
from sklearn.model_selection import train_test_split 
from sklearn.datasets import make_classification

# Generate synthetic data for binary classification 
X, y = make_classification(n_samples=1000, n_features=20, n_informative=15, 
                            n_classes=2, random_state=42)

# Split the data into training and testing sets (80% train, 20% test) 
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Build the deep neural network model 
model = Sequential() 
model.add(Dense(64, input_dim=X_train.shape[1], activation='relu'))  # First hidden layer 
model.add(Dense(32, activation='relu'))  # Second hidden layer 
model.add(Dense(16, activation='relu'))  # Third hidden layer 
model.add(Dense(1, activation='sigmoid'))  # Output layer 

# Compile the model 
model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])

# Train the model 
model.fit(X_train, y_train, epochs=50, batch_size=32, verbose=1)

# Evaluate the model on the test data 
loss, accuracy = model.evaluate(X_test, y_test) 
print(f"Test Loss: {loss:.4f}, Test Accuracy: {accuracy:.4f}")

# Predict on new data (X_test in this case) 
predictions = model.predict(X_test) 
predictions_binary = (predictions > 0.5).astype("int32")

# Print a few predictions 
print(predictions_binary[:10])
