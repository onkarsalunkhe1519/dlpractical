import numpy as np 
import matplotlib.pyplot as plt 
from tensorflow.keras.datasets import mnist 
from tensorflow.keras.models import Model 
from tensorflow.keras.layers import Input, Conv2D, MaxPooling2D, UpSampling2D 

# Step 1: Load and Preprocess the Dataset 
(x_train, _), (x_test, _) = mnist.load_data() 

# Normalize the pixel values to the range [0, 1] 
x_train = x_train.astype('float32') / 255. 
x_test = x_test.astype('float32') / 255. 

# Reshape for the Conv2D layer (Add a channel dimension) 
x_train = np.reshape(x_train, (x_train.shape[0], 28, 28, 1)) 
x_test = np.reshape(x_test, (x_test.shape[0], 28, 28, 1)) 

# Add random noise to the images 
noise_factor = 0.5 
x_train_noisy = x_train + noise_factor * np.random.normal(loc=0.0, scale=1.0, size=x_train.shape) 
x_test_noisy = x_test + noise_factor * np.random.normal(loc=0.0, scale=1.0, size=x_test.shape) 

# Clip the values to be between 0 and 1 
x_train_noisy = np.clip(x_train_noisy, 0., 1.) 
x_test_noisy = np.clip(x_test_noisy, 0., 1.) 

# Step 2: Define the Autoencoder Model 
# Encoder 
input_img = Input(shape=(28, 28, 1)) 
x = Conv2D(32, (3, 3), activation='relu', padding='same')(input_img) 
x = MaxPooling2D((2, 2), padding='same')(x) 
x = Conv2D(32, (3, 3), activation='relu', padding='same')(x) 
encoded = MaxPooling2D((2, 2), padding='same')(x) 

# Decoder 
x = Conv2D(32, (3, 3), activation='relu', padding='same')(encoded) 
x = UpSampling2D((2, 2))(x) 
x = Conv2D(32, (3, 3), activation='relu', padding='same')(x) 
x = UpSampling2D((2, 2))(x) 
decoded = Conv2D(1, (3, 3), activation='sigmoid', padding='same')(x) 

# Combine into a model 
autoencoder = Model(input_img, decoded) 
autoencoder.compile(optimizer='adam', loss='binary_crossentropy') 

# Step 3: Train the Autoencoder 
autoencoder.fit( 
    x_train_noisy, x_train, 
    epochs=10, 
    batch_size=128, 
    shuffle=True, 
    validation_data=(x_test_noisy, x_test)) 

# Step 4: Evaluate and Visualize Results 
# Denoise the test images 
decoded_imgs = autoencoder.predict(x_test_noisy) 

# Plot original, noisy, and denoised images 
n = 10  # Number of images to display 
plt.figure(figsize=(20, 6)) 

for i in range(n): 
    # Display original images 
    ax = plt.subplot(3, n, i + 1) 
    plt.imshow(x_test[i].reshape(28, 28), cmap='gray') 
    plt.title("Original") 
    plt.axis('off') 

    # Display noisy images 
    ax = plt.subplot(3, n, i + 1 + n) 
    plt.imshow(x_test_noisy[i].reshape(28, 28), cmap='gray') 
    plt.title("Noisy") 
    plt.axis('off') 

    # Display denoised images 
    ax = plt.subplot(3, n, i + 1 + 2 * n) 
    plt.imshow(decoded_imgs[i].reshape(28, 28), cmap='gray') 
    plt.title("Denoised") 
    plt.axis('off') 

plt.tight_layout() 
plt.show()
