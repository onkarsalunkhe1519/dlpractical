import numpy as np 
import pandas as pd 
import yfinance as yf 
import matplotlib.pyplot as plt 
from sklearn.preprocessing import MinMaxScaler 
from tensorflow.keras.models import Sequential 
from tensorflow.keras.layers import LSTM, Dense, Dropout 
from sklearn.model_selection import train_test_split 
from sklearn.metrics import mean_squared_error

# 1. Fetch Historical Stock Data (e.g., Apple stock data) 
stock_symbol = 'AAPL' 
stock_data = yf.download(stock_symbol, start='2010-01-01', end='2023-01-01') 

# Display the first few rows of the dataset 
print(stock_data.head()) 

# 2. Preprocess the data 
# Use the 'Close' price for prediction 
data = stock_data[['Close']].values 

# Normalize the data using MinMaxScaler (0 to 1 range) 
scaler = MinMaxScaler(feature_range=(0, 1)) 
scaled_data = scaler.fit_transform(data) 

# 3. Prepare the data for sequence prediction 
# Create sequences of 60 previous days to predict the next day's price 
sequence_length = 60 
X = [] 
y = [] 

for i in range(sequence_length, len(scaled_data)): 
    X.append(scaled_data[i-sequence_length:i, 0]) # Previous 60 days' prices 
    y.append(scaled_data[i, 0]) # Next day's price 

X = np.array(X) 
y = np.array(y) 

# Reshape X to be compatible with LSTM input (samples, timesteps, features) 
X = np.reshape(X, (X.shape[0], X.shape[1], 1)) 

# 4. Split the data into training and testing sets 
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, shuffle=False) 

# 5. Build the LSTM Model 
model = Sequential() 

# Add LSTM layer with 50 units and input shape 
model.add(LSTM(units=50, return_sequences=True, input_shape=(X_train.shape[1], 1))) 
model.add(Dropout(0.2)) # Dropout for regularization 

# Add another LSTM layer 
model.add(LSTM(units=50, return_sequences=False)) 
model.add(Dropout(0.2)) 

# Add a Dense layer for the output 
model.add(Dense(units=1)) # Predict next day's stock price 

# 6. Compile the model 
model.compile(optimizer='adam', loss='mean_squared_error') 

# 7. Train the model 
history = model.fit(X_train, y_train, epochs=20, batch_size=32, validation_data=(X_test, y_test)) 

# 8. Make predictions on test data 
predictions = model.predict(X_test) 

# Inverse the normalization to get original price values 
predictions = scaler.inverse_transform(predictions) 
y_test_actual = scaler.inverse_transform(y_test.reshape(-1, 1)) 

# 9. Visualize the results 
plt.figure(figsize=(14, 8)) 
plt.plot(y_test_actual, color='blue', label='Actual Stock Price') 
plt.plot(predictions, color='red', label='Predicted Stock Price') 
plt.title(f'{stock_symbol} Stock Price Prediction') 
plt.xlabel('Time') 
plt.ylabel('Stock Price') 
plt.legend() 
plt.show() 

# 10. Evaluate the model's performance 
mse = mean_squared_error(y_test_actual, predictions) 
print(f"Mean Squared Error (MSE): {mse:.2f}")
